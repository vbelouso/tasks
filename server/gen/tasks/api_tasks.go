/*
 * Tasks Hub
 *
 * This is a sample Tasks Hub Server based on the OpenAPI 3.0 specification.  Some useful links: - [The Tasks Hub repository](https://github.com/vbelouso/tasks) - [The source API definition](https://github.com/vbelouso/tasks/api/openapi-spec/v1/openapi.yaml)
 *
 * API version: 1.0.11
 * Contact: fake@msbang.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tasks

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TasksApiController binds http requests to an api service and writes the service results to the http response
type TasksApiController struct {
	service TasksApiServicer
	errorHandler ErrorHandler
}

// TasksApiOption for how the controller is set up.
type TasksApiOption func(*TasksApiController)

// WithTasksApiErrorHandler inject ErrorHandler into controller
func WithTasksApiErrorHandler(h ErrorHandler) TasksApiOption {
	return func(c *TasksApiController) {
		c.errorHandler = h
	}
}

// NewTasksApiController creates a default api controller
func NewTasksApiController(s TasksApiServicer, opts ...TasksApiOption) Router {
	controller := &TasksApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TasksApiController
func (c *TasksApiController) Routes() Routes {
	return Routes{ 
		{
			"AddTask",
			strings.ToUpper("Post"),
			"/v1/tasks",
			c.AddTask,
		},
		{
			"DeleteTask",
			strings.ToUpper("Delete"),
			"/v1/tasks/{taskId}",
			c.DeleteTask,
		},
		{
			"FindTasksByStatus",
			strings.ToUpper("Get"),
			"/v1/tasks/findByStatus",
			c.FindTasksByStatus,
		},
		{
			"GetTaskById",
			strings.ToUpper("Get"),
			"/v1/tasks/{taskId}",
			c.GetTaskById,
		},
		{
			"GetTasks",
			strings.ToUpper("Get"),
			"/v1/tasks",
			c.GetTasks,
		},
		{
			"UpdateTask",
			strings.ToUpper("Put"),
			"/v1/tasks/{taskId}",
			c.UpdateTask,
		},
	}
}

// AddTask - Add a new task
func (c *TasksApiController) AddTask(w http.ResponseWriter, r *http.Request) {
	taskRequestParam := TaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&taskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTaskRequestRequired(taskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddTask(r.Context(), taskRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteTask - Deletes a task
func (c *TasksApiController) DeleteTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam, err := parseInt64Parameter(params["taskId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindTasksByStatus - Find tasks by status
func (c *TasksApiController) FindTasksByStatus(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	statusParam := query.Get("status")
	result, err := c.service.FindTasksByStatus(r.Context(), statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTaskById - Find task by ID
func (c *TasksApiController) GetTaskById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam, err := parseInt64Parameter(params["taskId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetTaskById(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTasks - Retrieves all tasks
func (c *TasksApiController) GetTasks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sizeParam, err := parseInt32Parameter(query.Get("size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetTasks(r.Context(), pageParam, sizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateTask - Updates an existing task
func (c *TasksApiController) UpdateTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam, err := parseInt64Parameter(params["taskId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	taskRequestParam := TaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&taskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTaskRequestRequired(taskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTask(r.Context(), taskIdParam, taskRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
