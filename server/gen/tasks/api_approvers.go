/*
 * Tasks Hub
 *
 * This is a sample Tasks Hub Server based on the OpenAPI 3.0 specification.  Some useful links: - [The Tasks Hub repository](https://github.com/vbelouso/tasks) - [The source API definition](https://github.com/vbelouso/tasks/api/openapi-spec/v1/openapi.yaml)
 *
 * API version: 1.0.11
 * Contact: fake@msbang.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tasks

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApproversApiController binds http requests to an api service and writes the service results to the http response
type ApproversApiController struct {
	service ApproversApiServicer
	errorHandler ErrorHandler
}

// ApproversApiOption for how the controller is set up.
type ApproversApiOption func(*ApproversApiController)

// WithApproversApiErrorHandler inject ErrorHandler into controller
func WithApproversApiErrorHandler(h ErrorHandler) ApproversApiOption {
	return func(c *ApproversApiController) {
		c.errorHandler = h
	}
}

// NewApproversApiController creates a default api controller
func NewApproversApiController(s ApproversApiServicer, opts ...ApproversApiOption) Router {
	controller := &ApproversApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApproversApiController
func (c *ApproversApiController) Routes() Routes {
	return Routes{ 
		{
			"AddApprover",
			strings.ToUpper("Post"),
			"/v1/approvers",
			c.AddApprover,
		},
		{
			"DeleteApprover",
			strings.ToUpper("Delete"),
			"/v1/approvers/{approver_email}",
			c.DeleteApprover,
		},
		{
			"FindApproversByEmail",
			strings.ToUpper("Get"),
			"/v1/approvers/findByEmail",
			c.FindApproversByEmail,
		},
		{
			"GetApprovers",
			strings.ToUpper("Get"),
			"/v1/approvers",
			c.GetApprovers,
		},
		{
			"UpdateApprover",
			strings.ToUpper("Put"),
			"/v1/approvers/{approver_email}",
			c.UpdateApprover,
		},
	}
}

// AddApprover - Add a new approver
func (c *ApproversApiController) AddApprover(w http.ResponseWriter, r *http.Request) {
	approverRequestParam := ApproverRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approverRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApproverRequestRequired(approverRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddApprover(r.Context(), approverRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteApprover - Delete approver
func (c *ApproversApiController) DeleteApprover(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	approverEmailParam := params["approver_email"]
	result, err := c.service.DeleteApprover(r.Context(), approverEmailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindApproversByEmail - Find approver by email
func (c *ApproversApiController) FindApproversByEmail(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	emailParam := query.Get("email")
	result, err := c.service.FindApproversByEmail(r.Context(), emailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetApprovers - Retrieve all approvers
func (c *ApproversApiController) GetApprovers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sizeParam, err := parseInt32Parameter(query.Get("size"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetApprovers(r.Context(), pageParam, sizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateApprover - Updates an existing approver
func (c *ApproversApiController) UpdateApprover(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	approverEmailParam := params["approver_email"]
	approverRequestParam := ApproverRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approverRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApproverRequestRequired(approverRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateApprover(r.Context(), approverEmailParam, approverRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
