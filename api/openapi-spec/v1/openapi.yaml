openapi: 3.0.3
info:
  title: Tasks Hub
  description: |-
    This is a sample Tasks Hub Server based on the OpenAPI 3.0 specification.
    
    Some useful links:
    - [The Tasks Hub repository](https://github.com/vbelouso/tasks)
    - [The source API definition](https://github.com/vbelouso/tasks/api/openapi-spec/v1/openapi.yaml)
  contact:
    email: fake@msbang.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: tasks
    description: Tasks management
  - name: approvers
    description: Approvers management
paths:
  /v1/tasks:
    post:
      tags:
        - tasks
      summary: Add a new task
      description: Add a new task
      operationId: addTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - tasks
      summary: Retrieves all tasks
      operationId: getTasks
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of tasks per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
  /v1/tasks/{taskId}:
    put:
      tags:
        - tasks
      summary: Updates an existing task
      description: Updates an existing task by ID
      operationId: updateTask.
      parameters:
       - name: taskId
         in: path
         description: Task ID to update
         required: true
         schema:
           type: integer
           format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - tasks
      summary: Deletes a task
      description: Deletes a task by ID
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: Task ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: success
        'default':
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - tasks
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
  /v1/tasks/findByStatus:
    get:
      tags:
        - tasks
      summary: Find tasks by status
      operationId: findTasksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
            enum:
              - done
              - processing
              - rejected
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'          
        'default':
          $ref: '#/components/responses/DefaultError'
  /v1/approvers:
    post:
      tags:
        - approvers
      summary: Add a new approver
      description: Add a new approver
      operationId: addApprover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproverRequest'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproverResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - approvers
      summary: Retrieve all approvers
      operationId: getApprovers
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Number of approvers per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApproverResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
  /v1/approvers/findByEmail:
    get:
      tags:
        - approvers
      summary: Find approver by email
      operationId: findApproversByEmail
      parameters:
        - name: email
          in: query
          description: Email value that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproverResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
  /v1/approvers/{approver_email}:
    put:
      tags:
        - approvers
      summary: Updates an existing approver
      description: Updates an existing approver by email
      operationId: updateApprover
      parameters:
        - name: approver_email
          in: path
          description: approver that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproverRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        'default':
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - approvers
      summary: Delete approver
      description: Delete an existing approver by email
      operationId: deleteApprover
      parameters:
        - name: approver_email
          in: path
          description: The approver that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: success
        'default':
          $ref: '#/components/responses/DefaultError'
components:
  schemas:
    ApproverRequest:
      required:
        - name
        - email
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: jdoe@fake.com
    ApproverResponse:
      required:
        - id
        - name
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: jdoe@fake.com
    TaskRequest:
      required:
        - title
        - description
        - approverss
      type: object
      properties:
        title:
          type: string
          example: Define OpenAPI specification
        description:
          type: string
          example: Task description
        approvers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ApproverRequest'
      xml:
        name: task
    TaskResponse:
      required:
        - title
        - description
        - approverss
        - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Define OpenAPI specification
        description:
          type: string
          example: Task description
        approvers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ApproverRequest'
  requestBodies:
    Task:
      description: Task object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskRequest'
  responses:
    SuccessResponse:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: success
    DefaultError:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errorCode:
                type: string
